/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.argoproj_labs.argo_dataflow.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// default backoff is 100ms
message Backoff {
  // the number of backoff steps, zero means no retries
  optional uint64 steps = 1;

  // the cap of the backoff, should be >100ms, otherwise backoff is capped immediately
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration cap = 2;

  // the amount of jitter per step, typically 10-20%, >100% is valid, but strange
  optional uint32 jitterPercentage = 3;
}

message Cat {
}

message Container {
  optional string image = 1;

  repeated k8s.io.api.core.v1.VolumeMount volumeMounts = 5;

  optional Interface in = 3;

  repeated string command = 6;

  repeated string args = 7;

  repeated k8s.io.api.core.v1.EnvVar env = 8;
}

message Cron {
  optional string schedule = 1;

  // +kubebuilder:default="2006-01-02T15:04:05Z07:00"
  optional string layout = 2;
}

message Dedupe {
  // +kubebuilder:default="sha1(msg)"
  optional string uid = 1;

  // MaxSize is the maximum number of entries to keep in the in-memory database used to store recent UIDs.
  // Larger number mean bigger windows of time for dedupe, but greater memory usage.
  // +kubebuilder:default="1M"
  optional k8s.io.apimachinery.pkg.api.resource.Quantity maxSize = 2;
}

message Error {
  // +kubebuilder:validation:MaxLength=64
  optional string message = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 2;
}

message Expand {
}

message Flatten {
}

message GetPodSpecReq {
  optional string pipelineName = 1;

  optional string namespace = 2;

  optional int32 replica = 3;

  optional string imageFormat = 4;

  optional string runnerImage = 5;

  optional string pullPolicy = 6;

  optional int64 updateInterval = 7;

  optional StepStatus stepStatus = 8;

  optional string bearerToken = 9;

  optional k8s.io.api.core.v1.ResourceRequirements resourceRequirements = 10;
}

message Git {
  optional string image = 1;

  repeated string command = 6;

  optional string url = 2;

  // +kubebuilder:default=.
  optional string path = 3;

  // +kubebuilder:default=main
  optional string branch = 4;

  repeated k8s.io.api.core.v1.EnvVar env = 5;
}

message Group {
  optional string key = 1;

  optional string endOfGroup = 2;

  optional string format = 3;

  optional Storage storage = 4;
}

message HTTP {
}

message HTTPSink {
  optional string url = 1;
}

message HTTPSource {
  optional string serviceName = 1;
}

message Handler {
  optional string runtime = 4;

  optional string code = 3;
}

message Interface {
  optional bool fifo = 1;

  optional HTTP http = 2;
}

message Kafka {
  // +kubebuilder:default=default
  optional string name = 1;

  repeated string brokers = 2;

  optional string topic = 3;

  optional string version = 4;

  optional KafkaNET net = 5;
}

message KafkaNET {
  optional TLS tls = 1;
}

message Log {
}

message Message {
  // +kubebuilder:validation:MaxLength=64
  optional string data = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 2;
}

message Metadata {
  map<string, string> annotations = 1;

  map<string, string> labels = 2;
}

message Metrics {
  optional uint64 total = 1;

  optional uint64 errors = 5;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity rate = 6;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=pl
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

message PipelineSpec {
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated StepSpec steps = 1;
}

message PipelineStatus {
  optional string phase = 1;

  optional string message = 2;

  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;
}

message STAN {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string natsUrl = 4;

  optional string natsMonitoringUrl = 8;

  optional string clusterId = 5;

  optional string subject = 3;

  optional string subjectPrefix = 6;
}

message Scale {
  optional int32 minReplicas = 1;

  optional uint32 maxReplicas = 2;

  // takes precedence over min
  optional uint32 replicaRatio = 3;
}

message Sink {
  // +kubebuilder:default=default
  optional string name = 1;

  optional STAN stan = 2;

  optional Kafka kafka = 3;

  optional Log log = 4;

  optional HTTPSink http = 5;
}

message Source {
  // +kubebuilder:default=default
  optional string name = 1;

  optional Cron cron = 2;

  optional STAN stan = 3;

  optional Kafka kafka = 4;

  optional HTTPSource http = 5;

  // +kubebuilder:default={steps: 2, jitterPercentage: 10}
  optional Backoff retry = 7;
}

message SourceStatus {
  optional Message lastMessage = 2;

  optional Error lastError = 5;

  optional uint64 pending = 3;

  map<string, Metrics> metrics = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.selector
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Reason",type=string,JSONPath=`.status.reason`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
// +kubebuilder:printcolumn:name="Desired",type=string,JSONPath=`.spec.replicas`
// +kubebuilder:printcolumn:name="Current",type=string,JSONPath=`.status.replicas`
message Step {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StepSpec spec = 2;

  optional StepStatus status = 3;
}

message StepList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Step items = 2;
}

message StepSpec {
  // +kubebuilder:default=default
  optional string name = 6;

  optional Cat cat = 15;

  optional Container container = 1;

  optional Handler handler = 7;

  optional Git git = 12;

  optional string filter = 8;

  optional string map = 9;

  optional Group group = 11;

  optional Flatten flatten = 25;

  optional Expand expand = 26;

  optional Dedupe dedupe = 27;

  // +kubebuilder:default=1
  optional uint32 replicas = 23;

  optional Scale scale = 24;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Source sources = 3;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Sink sinks = 4;

  // +kubebuilder:default=OnFailure
  optional string restartPolicy = 5;

  optional bool terminator = 10;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.Volume volumes = 13;

  // +kubebuilder:default=pipeline
  optional string serviceAccountName = 14;

  optional Metadata metadata = 16;

  map<string, string> nodeSelector = 17;

  optional k8s.io.api.core.v1.Affinity affinity = 18;

  repeated k8s.io.api.core.v1.Toleration tolerations = 19;
}

message StepStatus {
  optional string phase = 1;

  optional string reason = 8;

  optional string message = 2;

  optional uint32 replicas = 5;

  optional string selector = 7;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaledAt = 6;

  map<string, SourceStatus> sourceStatuses = 3;

  map<string, SourceStatus> sinkStatuses = 4;
}

message Storage {
  optional string name = 1;

  // volume name
  optional string subPath = 2;
}

message TLS {
}

