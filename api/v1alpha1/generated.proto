/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj_labs.argo_dataflow.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message AWSCredentials {
  optional k8s.io.api.core.v1.SecretKeySelector accessKeyId = 1;

  optional k8s.io.api.core.v1.SecretKeySelector secretAccessKey = 2;

  optional k8s.io.api.core.v1.SecretKeySelector sessionToken = 3;
}

message AWSEndpoint {
  optional string url = 1;
}

message AbstractStep {
  // +kubebuilder:default={limits: {"cpu": "500m", "memory": "256Mi"}, requests: {"cpu": "100m", "memory": "64Mi"}}
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;
}

message AbstractVolumeSource {
  // HostPath represents a pre-existing file or directory on the host
  // machine that is directly exposed to the container. This is generally
  // used for system agents or other privileged things that are allowed
  // to see the host machine. Most containers will NOT need this.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  // ---
  // TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
  // mount host directories as read/write.
  // +optional
  optional k8s.io.api.core.v1.HostPathVolumeSource hostPath = 1;

  // EmptyDir represents a temporary directory that shares a pod's lifetime.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
  // +optional
  optional k8s.io.api.core.v1.EmptyDirVolumeSource emptyDir = 2;

  // GCEPersistentDisk represents a GCE Disk resource that is attached to a
  // kubelet's host machine and then exposed to the pod.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
  // +optional
  optional k8s.io.api.core.v1.GCEPersistentDiskVolumeSource gcePersistentDisk = 3;

  // AWSElasticBlockStore represents an AWS Disk resource that is attached to a
  // kubelet's host machine and then exposed to the pod.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
  // +optional
  optional k8s.io.api.core.v1.AWSElasticBlockStoreVolumeSource awsElasticBlockStore = 4;

  // GitRepo represents a git repository at a particular revision.
  // DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
  // EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
  // into the Pod's container.
  // +optional
  optional k8s.io.api.core.v1.GitRepoVolumeSource gitRepo = 5;

  // Secret represents a secret that should populate this volume.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  // +optional
  optional k8s.io.api.core.v1.SecretVolumeSource secret = 6;

  // NFS represents an NFS mount on the host that shares a pod's lifetime
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
  // +optional
  optional k8s.io.api.core.v1.NFSVolumeSource nfs = 7;

  // ISCSI represents an ISCSI Disk resource that is attached to a
  // kubelet's host machine and then exposed to the pod.
  // More info: https://examples.k8s.io/volumes/iscsi/README.md
  // +optional
  optional k8s.io.api.core.v1.ISCSIVolumeSource iscsi = 8;

  // Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
  // More info: https://examples.k8s.io/volumes/glusterfs/README.md
  // +optional
  optional k8s.io.api.core.v1.GlusterfsVolumeSource glusterfs = 9;

  // PersistentVolumeClaimVolumeSource represents a reference to a
  // PersistentVolumeClaim in the same namespace.
  // More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
  // +optional
  optional k8s.io.api.core.v1.PersistentVolumeClaimVolumeSource persistentVolumeClaim = 10;

  // RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
  // More info: https://examples.k8s.io/volumes/rbd/README.md
  // +optional
  optional k8s.io.api.core.v1.RBDVolumeSource rbd = 11;

  // FlexVolume represents a generic volume resource that is
  // provisioned/attached using an exec based plugin.
  // +optional
  optional k8s.io.api.core.v1.FlexVolumeSource flexVolume = 12;

  // Cinder represents a cinder volume attached and mounted on kubelets host machine.
  // More info: https://examples.k8s.io/mysql-cinder-pd/README.md
  // +optional
  optional k8s.io.api.core.v1.CinderVolumeSource cinder = 13;

  // CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
  // +optional
  optional k8s.io.api.core.v1.CephFSVolumeSource cephfs = 14;

  // Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
  // +optional
  optional k8s.io.api.core.v1.FlockerVolumeSource flocker = 15;

  // DownwardAPI represents downward API about the pod that should populate this volume
  // +optional
  optional k8s.io.api.core.v1.DownwardAPIVolumeSource downwardAPI = 16;

  // FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
  // +optional
  optional k8s.io.api.core.v1.FCVolumeSource fc = 17;

  // AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
  // +optional
  optional k8s.io.api.core.v1.AzureFileVolumeSource azureFile = 18;

  // ConfigMap represents a configMap that should populate this volume
  // +optional
  optional k8s.io.api.core.v1.ConfigMapVolumeSource configMap = 19;

  // VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
  // +optional
  optional k8s.io.api.core.v1.VsphereVirtualDiskVolumeSource vsphereVolume = 20;

  // Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
  // +optional
  optional k8s.io.api.core.v1.QuobyteVolumeSource quobyte = 21;

  // AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
  // +optional
  optional k8s.io.api.core.v1.AzureDiskVolumeSource azureDisk = 22;

  // PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
  optional k8s.io.api.core.v1.PhotonPersistentDiskVolumeSource photonPersistentDisk = 23;

  // Items for all in one resources secrets, configmaps, and downward API
  optional k8s.io.api.core.v1.ProjectedVolumeSource projected = 26;

  // PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
  // +optional
  optional k8s.io.api.core.v1.PortworxVolumeSource portworxVolume = 24;

  // ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
  // +optional
  optional k8s.io.api.core.v1.ScaleIOVolumeSource scaleIO = 25;

  // StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
  // +optional
  optional k8s.io.api.core.v1.StorageOSVolumeSource storageos = 27;

  // CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
  // +optional
  optional k8s.io.api.core.v1.CSIVolumeSource csi = 28;

  // Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature).
  // The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
  // and deleted when the pod is removed.
  //
  // Use this if:
  // a) the volume is only needed while the pod runs,
  // b) features of normal volumes like restoring from snapshot or capacity
  //    tracking are needed,
  // c) the storage driver is specified through a storage class, and
  // d) the storage driver supports dynamic volume provisioning through
  //    a PersistentVolumeClaim (see EphemeralVolumeSource for more
  //    information on the connection between this volume type
  //    and PersistentVolumeClaim).
  //
  // Use PersistentVolumeClaim or one of the vendor-specific
  // APIs for volumes that persist for longer than the lifecycle
  // of an individual pod.
  //
  // Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
  // be used that way - see the documentation of the driver for
  // more information.
  //
  // A pod can use both types of ephemeral volumes and
  // persistent volumes at the same time.
  //
  // +optional
  optional k8s.io.api.core.v1.EphemeralVolumeSource ephemeral = 29;
}

message Backoff {
  // +kubebuilder:default="100ms"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration duration = 4;

  // +kubebuilder:default=200
  optional uint32 FactorPercentage = 5;

  // the number of backoff steps, zero means no retries
  // +kubebuilder:default=20
  optional uint64 steps = 1;

  // +kubebuilder:default="0ms"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration cap = 2;

  // the amount of jitter per step, typically 10-20%, >100% is valid, but strange
  // +kubebuilder:default=10
  optional uint32 jitterPercentage = 3;
}

message Cat {
  optional AbstractStep abstractStep = 1;
}

message Code {
  optional string runtime = 4;

  // Image is used in preference to Runtime.
  optional string image = 5;

  optional string source = 3;
}

message Container {
  optional string image = 1;

  repeated k8s.io.api.core.v1.VolumeMount volumeMounts = 5;

  optional Interface in = 3;

  repeated string command = 6;

  repeated string args = 7;

  repeated k8s.io.api.core.v1.EnvVar env = 8;

  optional k8s.io.api.core.v1.ResourceRequirements resources = 9;
}

message Cron {
  optional string schedule = 1;

  // +kubebuilder:default="2006-01-02T15:04:05Z07:00"
  optional string layout = 2;
}

message DBDataSource {
  optional string value = 1;

  optional DBDataSourceFrom valueFrom = 2;
}

message DBDataSourceFrom {
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 1;
}

message DBSink {
  optional Database database = 1;

  repeated SQLAction actions = 2;
}

message DBSource {
  optional Database database = 1;

  optional string query = 2;

  optional string offsetColumn = 3;

  // +kubebuilder:default="1s"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration pollInterval = 4;

  // +kubebuilder:default="5s"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration commitInterval = 5;

  // +kubebuilder:default=true
  optional bool initSchema = 6;
}

message Database {
  // +kubebuilder:default=default
  optional string driver = 1;

  optional DBDataSource dataSource = 2;
}

message Dedupe {
  optional AbstractStep abstractStep = 1;

  // +kubebuilder:default="sha1(msg)"
  optional string uid = 2;

  // MaxSize is the maximum number of entries to keep in the in-memory database used to store recent UIDs.
  // Larger number mean bigger windows of time for dedupe, but greater memory usage.
  // +kubebuilder:default="1M"
  optional k8s.io.apimachinery.pkg.api.resource.Quantity maxSize = 3;
}

message Expand {
  optional AbstractStep abstractStep = 1;
}

message Filter {
  optional AbstractStep abstractStep = 1;

  optional string expression = 2;
}

message Flatten {
  optional AbstractStep abstractStep = 1;
}

message GetPodSpecReq {
  optional string cluster = 1;

  optional string pipelineName = 3;

  optional int32 replica = 4;

  optional string imageFormat = 5;

  optional string runnerImage = 6;

  optional string pullPolicy = 7;

  optional int64 updateInterval = 8;

  optional StepStatus stepStatus = 9;

  optional Sidecar sidecar = 10;

  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 11;

  optional string hostname = 12;

  optional string subdomain = 13;
}

message Git {
  optional string image = 1;

  repeated string command = 6;

  optional string url = 2;

  // UsernameSecret is the secret selector to the repository username
  optional k8s.io.api.core.v1.SecretKeySelector usernameSecret = 7;

  // PasswordSecret is the secret selector to the repository password
  optional k8s.io.api.core.v1.SecretKeySelector passwordSecret = 8;

  // SSHPrivateKeySecret is the secret selector to the repository ssh private key
  optional k8s.io.api.core.v1.SecretKeySelector sshPrivateKeySecret = 9;

  // +kubebuilder:default=.
  optional string path = 3;

  // +kubebuilder:default=main
  optional string branch = 4;

  repeated k8s.io.api.core.v1.EnvVar env = 5;
}

message Group {
  optional string key = 1;

  optional string endOfGroup = 2;

  optional string format = 3;

  optional Storage storage = 4;
}

message HTTP {
}

message HTTPHeader {
  optional string name = 1;

  optional string value = 2;

  optional HTTPHeaderSource valueFrom = 3;
}

message HTTPHeaderSource {
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 1;
}

message HTTPSink {
  optional string url = 1;

  repeated HTTPHeader headers = 2;

  optional bool insecureSkipVerify = 3;
}

message HTTPSource {
  optional string serviceName = 1;
}

message Interface {
  optional bool fifo = 1;

  optional HTTP http = 2;
}

message JetStream {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string natsUrl = 2;

  optional string subject = 3;

  optional NATSAuth auth = 4;
}

message JetStreamSink {
  optional JetStream jetstream = 1;
}

message JetStreamSource {
  optional JetStream jetstream = 1;
}

message Kafka {
  // +kubebuilder:default=default
  optional string name = 1;

  optional KafkaConfig kafkaConfig = 4;

  optional string topic = 3;
}

message KafkaConfig {
  repeated string brokers = 1;

  optional KafkaNET net = 3;

  optional int32 maxMessageBytes = 4;
}

message KafkaNET {
  optional TLS tls = 1;

  optional SASL sasl = 2;
}

message KafkaSink {
  optional Kafka kafka = 1;

  optional bool async = 2;

  // +kubebuilder:default="100Ki"
  optional k8s.io.apimachinery.pkg.api.resource.Quantity batchSize = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration linger = 4;

  // +kubebuilder:default="lz4"
  optional string compressionType = 5;

  // +kubebuilder:default="all"
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString acks = 6;

  // +kubebuilder:default=true
  optional bool enableIdempotence = 7;
}

message KafkaSource {
  optional Kafka kafka = 1;

  // +kubebuilder:default=Last
  optional string startOffset = 2;

  // +kubebuilder:default="100Ki"
  optional k8s.io.apimachinery.pkg.api.resource.Quantity fetchMin = 3;

  // +kubebuilder:default="500ms"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration fetchWaitMax = 4;

  // GroupID is the consumer group ID. If not specified, a unique deterministic group ID is generated.
  optional string groupId = 5;
}

message Log {
  optional uint64 truncate = 1;
}

message Map {
  optional AbstractStep abstractStep = 1;

  optional string expression = 2;
}

message Meta {
  optional string source = 1;

  optional string id = 2;

  // UnixTime
  optional int64 time = 3;
}

message Metadata {
  map<string, string> annotations = 1;

  map<string, string> labels = 2;
}

message NATSAuth {
  optional k8s.io.api.core.v1.SecretKeySelector token = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=pl
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

message PipelineSpec {
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated StepSpec steps = 1;

  // +kubebuilder:default="72h"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration deletionDelay = 2;
}

message PipelineStatus {
  optional string phase = 1;

  optional string message = 2;

  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 4;
}

message S3 {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string bucket = 2;

  optional string region = 3;

  optional AWSCredentials credentials = 4;

  optional AWSEndpoint endpoint = 5;
}

message S3Sink {
  optional S3 s3 = 4;
}

message S3Source {
  optional S3 s3 = 7;

  // +kubebuilder:default="1m"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration pollPeriod = 6;

  // +kubebuilder:default=1
  optional uint32 concurrency = 8;
}

message SASL {
  // SASLMechanism is the name of the enabled SASL mechanism.
  // Possible values: OAUTHBEARER, PLAIN (defaults to PLAIN).
  // +optional
  optional string mechanism = 1;

  // User is the authentication identity (authcid) to present for
  // SASL/PLAIN or SASL/SCRAM authentication
  optional k8s.io.api.core.v1.SecretKeySelector user = 2;

  // Password for SASL/PLAIN authentication
  optional k8s.io.api.core.v1.SecretKeySelector password = 3;
}

message SQLAction {
  optional SQLStatement statement = 1;

  optional SQLStatement onRecordNotFound = 2;

  optional SQLStatement onError = 3;
}

message SQLStatement {
  optional string sql = 1;

  repeated string args = 2;
}

message STAN {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string natsUrl = 4;

  optional string natsMonitoringUrl = 8;

  optional string clusterId = 5;

  optional string subject = 3;

  optional string subjectPrefix = 6;

  optional NATSAuth auth = 7;

  // Max inflight messages when subscribing to the stan server, which means how many messages
  // between commits, therefore potential duplicates during disruption
  // +kubebuilder:default=20
  optional uint32 maxInflight = 9;
}

message Scale {
  // An expression to determine the number of replicas. Must evaluation to an `int`.
  optional string desiredReplicas = 1;

  // An expression to determine the delay for peeking. Maybe string or duration, e.g. `"4m"`
  // +kubebuilder:default="defaultPeekDelay"
  optional string peekDelay = 2;

  // An expression to determine the delay for scaling. Maybe string or duration, e.g. `"1m"`
  // +kubebuilder:default="defaultScalingDelay"
  optional string scalingDelay = 3;
}

message Sidecar {
  // +kubebuilder:default={limits: {"cpu": "500m", "memory": "256Mi"}, requests: {"cpu": "100m", "memory": "64Mi"}}
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;
}

message Sink {
  // +kubebuilder:default=default
  optional string name = 1;

  optional STAN stan = 2;

  optional KafkaSink kafka = 3;

  optional Log log = 4;

  optional HTTPSink http = 5;

  optional S3Sink s3 = 6;

  optional DBSink db = 7;

  optional VolumeSink volume = 8;

  optional JetStreamSink jetstream = 9;

  optional bool deadLetterQueue = 10;
}

message Source {
  // +kubebuilder:default=default
  optional string name = 1;

  optional Cron cron = 2;

  optional STAN stan = 3;

  optional KafkaSource kafka = 4;

  optional HTTPSource http = 5;

  optional S3Source s3 = 8;

  optional DBSource db = 6;

  optional VolumeSource volume = 9;

  optional JetStreamSource jetstream = 10;

  // +kubebuilder:default={duration: "100ms", steps: 20, factorPercentage: 200, jitterPercentage: 10}
  optional Backoff retry = 7;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.selector
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Reason",type=string,JSONPath=`.status.reason`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
// +kubebuilder:printcolumn:name="Desired",type=string,JSONPath=`.spec.replicas`
// +kubebuilder:printcolumn:name="Current",type=string,JSONPath=`.status.replicas`
message Step {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StepSpec spec = 2;

  optional StepStatus status = 3;
}

message StepList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Step items = 2;
}

message StepSpec {
  // +kubebuilder:default=default
  optional string name = 6;

  optional Cat cat = 15;

  optional Container container = 1;

  optional Dedupe dedupe = 27;

  optional Expand expand = 26;

  optional Filter filter = 8;

  optional Flatten flatten = 25;

  optional Git git = 12;

  optional Group group = 11;

  optional Code code = 7;

  optional Map map = 9;

  // +kubebuilder:default=1
  optional uint32 replicas = 23;

  // +kubebuilder:default={peekDelay: "defaultPeekDelay", scalingDelay: "defaultScalingDelay", desiredReplicas: ""}
  optional Scale scale = 24;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Source sources = 3;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Sink sinks = 4;

  // +kubebuilder:default=OnFailure
  optional string restartPolicy = 5;

  optional bool terminator = 10;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.Volume volumes = 13;

  // +kubebuilder:default=pipeline
  optional string serviceAccountName = 14;

  optional Metadata metadata = 16;

  map<string, string> nodeSelector = 17;

  optional k8s.io.api.core.v1.Affinity affinity = 18;

  repeated k8s.io.api.core.v1.Toleration tolerations = 19;

  // +kubebuilder:default={resources: {limits: {"cpu": "500m", "memory": "256Mi"}, requests: {"cpu": "100m", "memory": "64Mi"}}}
  optional Sidecar sidecar = 28;

  // ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images
  // in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets
  // can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.
  // More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 20;
}

message StepStatus {
  optional string phase = 1;

  optional string reason = 6;

  optional string message = 2;

  optional uint32 replicas = 3;

  optional string selector = 5;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaledAt = 4;
}

message Storage {
  optional string name = 1;

  // volume name
  optional string subPath = 2;
}

message TLS {
  // CACertSecret refers to the secret that contains the CA cert
  optional k8s.io.api.core.v1.SecretKeySelector caCertSecret = 1;

  // CertSecret refers to the secret that contains the cert
  optional k8s.io.api.core.v1.SecretKeySelector certSecret = 2;

  // KeySecret refers to the secret that contains the key
  optional k8s.io.api.core.v1.SecretKeySelector keySecret = 3;
}

message VolumeSink {
  optional AbstractVolumeSource abstractVolumeSource = 1;
}

message VolumeSource {
  optional AbstractVolumeSource abstractVolumeSource = 9;

  // +kubebuilder:default="1m"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration pollPeriod = 6;

  // +kubebuilder:default=1
  optional uint32 concurrency = 8;

  optional bool readOnly = 10;
}

