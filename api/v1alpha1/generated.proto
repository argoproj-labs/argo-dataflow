/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.argoproj_labs.argo_dataflow.api.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message AWSCredentials {
  optional k8s.io.api.core.v1.SecretKeySelector accessKeyId = 1;

  optional k8s.io.api.core.v1.SecretKeySelector secretAccessKey = 2;
}

message AWSEndpoint {
  optional string url = 1;
}

message Backoff {
  // +kubebuilder:default="100ms"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration duration = 4;

  // +kubebuilder:default=200
  optional uint32 FactorPercentage = 5;

  // the number of backoff steps, zero means no retries
  // +kubebuilder:default=20
  optional uint64 steps = 1;

  // +kubebuilder:default="0ms"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration cap = 2;

  // the amount of jitter per step, typically 10-20%, >100% is valid, but strange
  // +kubebuilder:default=10
  optional uint32 jitterPercentage = 3;
}

message Cat {
}

message Code {
  optional string runtime = 4;

  optional string source = 3;
}

message Container {
  optional string image = 1;

  repeated k8s.io.api.core.v1.VolumeMount volumeMounts = 5;

  optional Interface in = 3;

  repeated string command = 6;

  repeated string args = 7;

  repeated k8s.io.api.core.v1.EnvVar env = 8;

  optional k8s.io.api.core.v1.ResourceRequirements resources = 9;
}

message Cron {
  optional string schedule = 1;

  // +kubebuilder:default="2006-01-02T15:04:05Z07:00"
  optional string layout = 2;
}

message DBDataSource {
  optional string value = 1;

  optional DBDataSourceFrom valueFrom = 2;
}

message DBDataSourceFrom {
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 1;
}

message DBSink {
  optional Database database = 1;

  repeated SQLAction actions = 2;
}

message Database {
  // +kubebuilder:default=default
  optional string driver = 1;

  optional DBDataSource dataSource = 2;
}

message Dedupe {
  // +kubebuilder:default="sha1(msg)"
  optional string uid = 1;

  // MaxSize is the maximum number of entries to keep in the in-memory database used to store recent UIDs.
  // Larger number mean bigger windows of time for dedupe, but greater memory usage.
  // +kubebuilder:default="1M"
  optional k8s.io.apimachinery.pkg.api.resource.Quantity maxSize = 2;
}

message Expand {
}

message Flatten {
}

message GetPodSpecReq {
  optional string clusterName = 9;

  optional string pipelineName = 1;

  optional string namespace = 2;

  optional int32 replica = 3;

  optional string imageFormat = 4;

  optional string runnerImage = 5;

  optional string pullPolicy = 6;

  optional int64 updateInterval = 7;

  optional StepStatus stepStatus = 8;

  optional Sidecar sidecar = 10;

  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 11;
}

message Git {
  optional string image = 1;

  repeated string command = 6;

  optional string url = 2;

  // UsernameSecret is the secret selector to the repository username
  optional k8s.io.api.core.v1.SecretKeySelector usernameSecret = 7;

  // PasswordSecret is the secret selector to the repository password
  optional k8s.io.api.core.v1.SecretKeySelector passwordSecret = 8;

  // SSHPrivateKeySecret is the secret selector to the repository ssh private key
  optional k8s.io.api.core.v1.SecretKeySelector sshPrivateKeySecret = 9;

  // +kubebuilder:default=.
  optional string path = 3;

  // +kubebuilder:default=main
  optional string branch = 4;

  repeated k8s.io.api.core.v1.EnvVar env = 5;
}

message Group {
  optional string key = 1;

  optional string endOfGroup = 2;

  optional string format = 3;

  optional Storage storage = 4;
}

message HTTP {
}

message HTTPHeader {
  optional string name = 1;

  optional string value = 2;

  optional HTTPHeaderSource valueFrom = 3;
}

message HTTPHeaderSource {
  optional k8s.io.api.core.v1.SecretKeySelector secretKeyRef = 1;
}

message HTTPSink {
  optional string url = 1;

  repeated HTTPHeader headers = 2;
}

message HTTPSource {
  optional string serviceName = 1;
}

message Interface {
  optional bool fifo = 1;

  optional HTTP http = 2;
}

message Kafka {
  // +kubebuilder:default=default
  optional string name = 1;

  optional KafkaConfig kafkaConfig = 4;

  optional string topic = 3;
}

message KafkaConfig {
  repeated string brokers = 1;

  optional string version = 2;

  optional KafkaNET net = 3;
}

message KafkaNET {
  optional TLS tls = 1;

  optional SASL sasl = 2;
}

message KafkaSink {
  optional Kafka kafka = 1;

  optional bool async = 2;
}

message KafkaSource {
  optional Kafka kafka = 1;

  // +kubebuilder:default=Last
  optional string startOffset = 2;
}

message Log {
  optional uint64 truncate = 1;
}

message Metadata {
  map<string, string> annotations = 1;

  map<string, string> labels = 2;
}

message Metrics {
  optional uint64 total = 1;

  optional uint64 errors = 2;

  optional k8s.io.apimachinery.pkg.api.resource.Quantity rate = 3;

  // current rate of messages per second
  optional uint64 retries = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:shortName=pl
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
message Pipeline {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PipelineSpec spec = 2;

  optional PipelineStatus status = 3;
}

message PipelineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Pipeline items = 2;
}

message PipelineSpec {
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated StepSpec steps = 1;
}

message PipelineStatus {
  optional string phase = 1;

  optional string message = 2;

  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 3;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdated = 4;
}

message S3 {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string bucket = 2;

  optional string region = 3;

  optional AWSCredentials credentials = 4;

  optional AWSEndpoint endpoint = 5;
}

message S3Sink {
  optional S3 s3 = 4;
}

message S3Source {
  optional S3 s3 = 7;

  // +kubebuilder:default="1m"
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration pollPeriod = 6;
}

message SASL {
  // SASLMechanism is the name of the enabled SASL mechanism.
  // Possible values: OAUTHBEARER, PLAIN (defaults to PLAIN).
  // +optional
  optional string mechanism = 1;

  // User is the authentication identity (authcid) to present for
  // SASL/PLAIN or SASL/SCRAM authentication
  optional k8s.io.api.core.v1.SecretKeySelector user = 2;

  // Password for SASL/PLAIN authentication
  optional k8s.io.api.core.v1.SecretKeySelector password = 3;
}

message SQLAction {
  optional SQLStatement statement = 1;

  optional SQLStatement onRecordNotFound = 2;

  optional SQLStatement onError = 3;
}

message SQLStatement {
  optional string sql = 1;

  repeated string args = 2;
}

message STAN {
  // +kubebuilder:default=default
  optional string name = 1;

  optional string natsUrl = 4;

  optional string natsMonitoringUrl = 8;

  optional string clusterId = 5;

  optional string subject = 3;

  optional string subjectPrefix = 6;

  optional STANAuth auth = 7;

  // Max inflight messages when subscribing to the stan server, which means how many messages
  // between commits, therefore potential duplicates during disruption
  // +kubebuilder:default=20
  optional uint32 maxInflight = 9;
}

message STANAuth {
  optional k8s.io.api.core.v1.SecretKeySelector token = 1;
}

message Scale {
  optional int32 minReplicas = 1;

  optional uint32 maxReplicas = 2;

  // takes precedence over min
  optional uint32 replicaRatio = 3;
}

message Sidecar {
  // +kubebuilder:default={limits: {"cpu": "500m", "memory": "256Mi"}, requests: {"cpu": "100m", "memory": "64Mi"}}
  optional k8s.io.api.core.v1.ResourceRequirements resources = 1;
}

message Sink {
  // +kubebuilder:default=default
  optional string name = 1;

  optional STAN stan = 2;

  optional KafkaSink kafka = 3;

  optional Log log = 4;

  optional HTTPSink http = 5;

  optional S3Sink s3 = 6;

  optional DBSink db = 7;
}

message Source {
  // +kubebuilder:default=default
  optional string name = 1;

  optional Cron cron = 2;

  optional STAN stan = 3;

  optional KafkaSource kafka = 4;

  optional HTTPSource http = 5;

  optional S3Source s3 = 8;

  // +kubebuilder:default={duration: "100ms", steps: 20, factorPercentage: 200, jitterPercentage: 10}
  optional Backoff retry = 7;
}

message SourceStatus {
  optional uint64 pending = 3;

  map<string, Metrics> metrics = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:subresource:scale:specpath=.spec.replicas,statuspath=.status.replicas,selectorpath=.status.selector
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`
// +kubebuilder:printcolumn:name="Reason",type=string,JSONPath=`.status.reason`
// +kubebuilder:printcolumn:name="Message",type=string,JSONPath=`.status.message`
// +kubebuilder:printcolumn:name="Desired",type=string,JSONPath=`.spec.replicas`
// +kubebuilder:printcolumn:name="Current",type=string,JSONPath=`.status.replicas`
message Step {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional StepSpec spec = 2;

  optional StepStatus status = 3;
}

message StepList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Step items = 2;
}

message StepSpec {
  // +kubebuilder:default=default
  optional string name = 6;

  optional Cat cat = 15;

  optional Container container = 1;

  optional Dedupe dedupe = 27;

  optional Expand expand = 26;

  optional string filter = 8;

  optional Flatten flatten = 25;

  optional Git git = 12;

  optional Group group = 11;

  optional Code code = 7;

  optional string map = 9;

  // +kubebuilder:default=1
  optional uint32 replicas = 23;

  optional Scale scale = 24;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Source sources = 3;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated Sink sinks = 4;

  // +kubebuilder:default=OnFailure
  optional string restartPolicy = 5;

  optional bool terminator = 10;

  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.Volume volumes = 13;

  // +kubebuilder:default=pipeline
  optional string serviceAccountName = 14;

  optional Metadata metadata = 16;

  map<string, string> nodeSelector = 17;

  optional k8s.io.api.core.v1.Affinity affinity = 18;

  repeated k8s.io.api.core.v1.Toleration tolerations = 19;

  // +kubebuilder:default={resources: {limits: {"cpu": "500m", "memory": "256Mi"}, requests: {"cpu": "100m", "memory": "64Mi"}}}
  optional Sidecar sidecar = 28;

  // ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images
  // in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets
  // can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.
  // More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  // +patchStrategy=merge
  // +patchMergeKey=name
  repeated k8s.io.api.core.v1.LocalObjectReference imagePullSecrets = 20;
}

message StepStatus {
  optional string phase = 1;

  optional string reason = 8;

  optional string message = 2;

  optional uint32 replicas = 5;

  optional string selector = 7;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScaledAt = 6;

  map<string, SourceStatus> sourceStatuses = 3;

  map<string, SourceStatus> sinkStatuses = 4;
}

message Storage {
  optional string name = 1;

  // volume name
  optional string subPath = 2;
}

message TLS {
  // CACertSecret refers to the secret that contains the CA cert
  optional k8s.io.api.core.v1.SecretKeySelector caCertSecret = 1;

  // CertSecret refers to the secret that contains the cert
  optional k8s.io.api.core.v1.SecretKeySelector certSecret = 2;

  // KeySecret refers to the secret that contains the key
  optional k8s.io.api.core.v1.SecretKeySelector keySecret = 3;
}

